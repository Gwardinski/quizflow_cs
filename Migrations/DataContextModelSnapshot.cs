// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizFlow.Data;

namespace QuizFlow.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("QuestionRound", b =>
                {
                    b.Property<int>("questionsid")
                        .HasColumnType("int");

                    b.Property<int>("roundsid")
                        .HasColumnType("int");

                    b.HasKey("questionsid", "roundsid");

                    b.HasIndex("roundsid");

                    b.ToTable("QuestionRound");
                });

            modelBuilder.Entity("QuizFlow.Models.Question", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("difficulty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("lastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("points")
                        .HasColumnType("float");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("questionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizFlow.Models.Quiz", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("lastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("totalPoints")
                        .HasColumnType("float");

                    b.Property<int?>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizFlow.Models.Round", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("lastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("totalPoints")
                        .HasColumnType("float");

                    b.Property<int?>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("QuizFlow.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("passwordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizRound", b =>
                {
                    b.Property<int>("quizzesid")
                        .HasColumnType("int");

                    b.Property<int>("roundsid")
                        .HasColumnType("int");

                    b.HasKey("quizzesid", "roundsid");

                    b.HasIndex("roundsid");

                    b.ToTable("QuizRound");
                });

            modelBuilder.Entity("QuestionRound", b =>
                {
                    b.HasOne("QuizFlow.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("questionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizFlow.Models.Round", null)
                        .WithMany()
                        .HasForeignKey("roundsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizFlow.Models.Question", b =>
                {
                    b.HasOne("QuizFlow.Models.User", "user")
                        .WithMany("questions")
                        .HasForeignKey("userid");

                    b.Navigation("user");
                });

            modelBuilder.Entity("QuizFlow.Models.Quiz", b =>
                {
                    b.HasOne("QuizFlow.Models.User", "user")
                        .WithMany("quizzes")
                        .HasForeignKey("userid");

                    b.Navigation("user");
                });

            modelBuilder.Entity("QuizFlow.Models.Round", b =>
                {
                    b.HasOne("QuizFlow.Models.User", "user")
                        .WithMany("rounds")
                        .HasForeignKey("userid");

                    b.Navigation("user");
                });

            modelBuilder.Entity("QuizRound", b =>
                {
                    b.HasOne("QuizFlow.Models.Quiz", null)
                        .WithMany()
                        .HasForeignKey("quizzesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizFlow.Models.Round", null)
                        .WithMany()
                        .HasForeignKey("roundsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizFlow.Models.User", b =>
                {
                    b.Navigation("questions");

                    b.Navigation("quizzes");

                    b.Navigation("rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
